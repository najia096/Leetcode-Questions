'''
#394. Given an encoded string, return its decoded string.

The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.

You may assume that the input string is always valid; there are no extra white spaces, square brackets are well-formed, etc. Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there will not be input like 3a or 2[4].

The test cases are generated so that the length of the output will never exceed 105.

#leetcode link: https://leetcode.com/problems/decode-string/description/
'''

'''
Time Complexity = O(n)
Space Complexity = O(n)
'''

'''
For the solution,
Will approach a stack based solution
There can be three scenarios for the input conditions: char is a digit, or '[', or a ']'
We will take two stacks, one for storing the counts and one for storing each substring inside []
'''


class Solution:
    def decodeString(self, s: str) -> str:
        num_stack = []
        str_stack = []
        curr_str = ""
        curr_num = 0

        for char in s:
            if char.isdigit():
                curr_num = curr_num * 10 + int(char)   #incase its multiple digits
            elif char == "[":
                num_stack.append(curr_num)
                str_stack.append(curr_str)

                curr_num = 0                          #reset the curr_num and curr_str after appending to respective stacks
                curr_str = ""

            elif char == "]":
                last_str = str_stack.pop()
                repeat_count = num_stack.pop()
                curr_str = last_str + (curr_str * repeat_count)

            else:
                curr_str += char                    
        return curr_str


        
