'''
#451.Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.

Return the sorted string. If there are multiple answers, return any of them.

 

Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.
 

#leetcode link: https://leetcode.com/problems/sort-characters-by-frequency/description/
'''

'''
Time Complexity: O(nlogn) because of sorting
Space Complexity: O(n)
'''

'''
For the solution,
we will take a dictionary of the count of each characters
then sort the dictionary based on its values in descending order
finally multiply each key with its value and build a result string

'''

class Solution:
    def frequencySort(self, s: str) -> str:
        my_dict = {}
        for char in s:
            if char not in my_dict:
                my_dict[char] = 1
            else:
                my_dict[char] += 1
        my_dict = dict(sorted(my_dict.items(), key=lambda item: item[1], reverse=True))
        print(my_dict)

        res = ""

        for key, value in my_dict.items():
            res += key * value
        return res

        
